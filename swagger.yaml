swagger: "2.0"
info:
  description: "
  
  A global coffee shop chain / franchise intends to launch an app to allow their regular customers to pre-order coffee to pick up (say, on their way to work). They have identified the following needs:
  
1  . The coffee shop chain is a global network. So, they need to service shop locations across multiple geographies.

2. The space is quite limited. So, they want everything to work easily on an app.

3. They need two apps (a) one for the shop owner and (b) one for the customer

4. They have decided to build (a) on Android and (b) on iOS and Android

5. Not all coffee shops have the same menu. So, they need to be able to handle a menu based on the shop

6. Most of their shops have only one queue, but some shops are able to support up to3 queues

7. They would like their service to be API enabled, so that others (3rd parties) can build apps using their APIs
  
  "

  version: "1.0.0"
  title: "Swagger Coffee Shiop" 
  contact:
    email: "nuwan.walisundara@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "editor.swagger.io"
basePath: "/v2"
tags:
- name: "menu"
  description: "Everything about the menue"

- name: "shop"
  description: "Shop admin "
- name: "user"
  description: "Operations about user"

schemes:
- "https"
- "http"
paths:
  /coffeeShop:
    post:
      tags:
      - "shop"
      summary: "Confgure new coffees hop"
      description: ""
      operationId: "configureShop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "shop object that needs to be added to the network"
        required: true
        schema:
          $ref: "#/definitions/CoffeeShop"
      responses:
        "405":
          description: "Invalid input"

    patch:
      tags:
      - "shop"
      summary: "Update an existing shop"
      description: ""
      operationId: "patchShop"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CoffeeShop"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Invalid shopt id/ no shop found"
        "405":
          description: "Validation exception"

        
  /coffeeShop/{code}:
    get:
      tags:
      - "shop"
      summary: "Find shop by ID"
      description: "Returns a single shop"
      operationId: "getShopById"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "string" 
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CoffeeShop"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "shop not found"
      security:
      - api_key: []
    delete:
      tags:
      - "shop"
      summary: "delete shop by ID"
      description: "Delete shop"
      operationId: "deleteShop"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "ID of shop to return"
        required: true
        type: "string" 
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "shop not found"


 
  /coffeeShop/{code}/menue/:
    patch:
      tags:
      - "menu"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "ID of menu to update"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Menu to update"
        required: true
        schema:
          $ref: '#/definitions/Menu'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Menu"
 
    post:
      tags:
      - "menu"
      summary: "uploads an image"
      description: ""
      operationId: "createMenue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "code of menu to update"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "code of menue to update"
        required: true
        schema:
          $ref: '#/definitions/Menu'
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Menu"

    get:
      tags:
      - "menu"
      summary: "uploads an image"
      description: ""
      operationId: "getShopOffering"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "path"
        description: "shop code "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CoffeeShop"

        

  /order/process:
    post:
      tags:
      - "order"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "The order object to persists"
        required: true
        schema:
         $ref: "#/definitions/OrderProcess"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
          
          
  /shop/order:
    post:
      tags:
      - "order"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "order to be placed"
        required: true
        schema:
            $ref: "#/definitions/Order"        
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
    patch:
      tags:
      - "order"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "patchOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "order to be patch"
        required: true
        schema:
            $ref: "#/definitions/Order"    
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
          
  /order/{orderId}:
    get:
      tags:
      - "order"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderByid"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of order that needs to be fetched"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "order"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
 
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

    
    
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      queueId:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "ready"
        - "delivered"
        - "cancelled"
      readyBy:
        type: "string"
      remarks:
        type: "string"
      orderItems:
        type: array
        items:
          $ref: '#/definitions/OrderItem'   
        
  OrderItem:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      menueRef:
        $ref: '#/definitions/Menu'
  OrderProcess:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "ready"
        - "delivered"
        - "cancelled"
      remarks:
        type: "string"
 
          
      

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"


        
  CoffeeShop:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      code:
        type: "string"
      name:
        type: "string"
      location:
        $ref : '#/definitions/Cordinate'
      address:
        $ref: '#/definitions/AddresRef'
      menuCategory:
        type: array
        items:
          $ref: '#/definitions/MenuCategory'    
      numberOfQue:
        type: "integer"
        format: "int32"
  Cordinate:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      lattitude:
        type: "number"
        format: "double"
      longitude:
        type: "number"
        format: "double"
  MenuCategory:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string" 
      description:
        type: "string"
      coffeeMenues:
        type: array
        items:
          $ref: '#/definitions/Menu'
  Menu:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string" 
      description:
        type: "string" 
      price:
        type: "number"
        format: "double"
      imageUrl:
        type: "string"

        
  AddresRef:
    description: ''
    type: object
    properties:
      city:
        description: City
        type: string
      country:
        description: ''
        type: string
      postcode:
        description: Postcode
        type: string
      stateOrProvince:
        description: State or province
        type: string
      streetOne:
        description: Describes the street
        type: string
      streetTwo:
        description: Complementary street description
        type: string
      emailAddress:
        description: Full email address in standard format
        type: string
      type:
        description: Type of medium (fax, mobile phone...)
        type: string
      number:
        description: Phone number
        type: string
  
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"